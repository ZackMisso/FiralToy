// pre-defined constants
#define EPSILON 1e-4
#define PI 3.1415926535897932384626433832795

// scene type
#define SPHERE 0
#define BOX 1
#define CYLINDER 2
#define CONE 3

// domain repetition
#define NONE 0
#define BOX 1
#define POLAR 2

// shade mode
#define GRID 0
#define COST 1
#define NORMAL 2
#define AMBIENT 3
#define DIFFUSE_POINT 4
#define DIFFUSE_POINT_HARD_SHADOWS 5
#define DIFFUSE_DIR_HARD_SHADOWS 6
#define DIFFUSE_POINT_SOFT_SHADOWS 7
#define DIFFUSE_DIR_SOFT_SHADOWS 8
#define SCENE_DIFFUSE_AMBIENT 9
#define SCENE_DIFFUSE_AMBIENT_REFLECT 10

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Hashes from Dave Hopkins
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Hash without Sine
// Creative Commons Attribution-ShareAlike 4.0 International Public License
// Created by David Hoskins.

//----------------------------------------------------------------------------------------
//  1 out, 1 in...
float hash11(float p)
{
    p = fract(p * .1031);
    p *= p + 33.33;
    p *= p + p;
    return fract(p);
}

//----------------------------------------------------------------------------------------
//  1 out, 2 in...
float hash12(vec2 p)
{
	vec3 p3  = fract(vec3(p.xyx) * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

//----------------------------------------------------------------------------------------
//  1 out, 3 in...
float hash13(vec3 p3)
{
	p3  = fract(p3 * .1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}


//----------------------------------------------------------------------------------------
///  2 out, 2 in...
vec2 hash22(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx+33.33);
    return fract((p3.xx+p3.yz)*p3.zy);

}

//----------------------------------------------------------------------------------------
///  3 out, 2 in...
vec3 hash32(vec2 p)
{
	vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yxz+33.33);
    return fract((p3.xxy+p3.yzz)*p3.zyx);
}


//float anim_speed = 0.35;
float anim_speed = 0.35;
int cost_norm = 200;

vec3 two_tone_color_a = vec3(0.6 * 1.0, 0.6 * 1.0, 0.0 * 1.0);
vec3 two_tone_color_b = vec3(0.2 * 1.0, 0.1 * 1.0, 0.9 * 1.0);
//vec3 two_tone_color_a = vec3(0.9,0.7,0.6);
//vec3 two_tone_color_b = vec3(0.0);
vec3 two_tone_dir = vec3(1.0, 1.0, 0.0);

//
// Ray
//

struct ray
{
    vec3 origin;            // this is the origin of the ray
    vec3 direction;         // this is the direction the ray is pointing in
};

//
// Camera
//

struct camera
{
    vec3 origin;            // this is the origin of your camera
    vec3 lower_left_corner; // this is the location of the lower-left corner of the image in relation to the origin
    vec3 horizontal;        // this is the horizontal extents of the image the camera sees
    vec3 vertical;          // this is the vertical extents of the image the camera sees
    vec3 u;
    vec3 v;
    float lens_radius;      // the radius of the lens
};

camera camera_const(vec3 lookfrom,
                    vec3 lookat,
                    vec3 up,
                    float fov,
                    float aspect,
                    float aperture,
                    float focal_dist)
{
    camera cam;

    vec3 w;

    cam.lens_radius = aperture / 2.0;

    float theta = fov * PI / 180.0;
    float half_height = tan(theta / 2.0);
    float half_width = aspect * half_height;
    cam.origin = lookfrom;
    w = normalize(lookfrom - lookat);
    cam.u = normalize(cross(up, w));
    cam.v = cross(w, cam.u);
    cam.lower_left_corner = cam.origin - half_width * cam.u * focal_dist - half_height * cam.v * focal_dist - w * focal_dist;
    cam.horizontal = 2.0 * half_width * cam.u * focal_dist;
    cam.vertical = 2.0 * half_height * cam.v * focal_dist;

    return cam;
}

ray camera_get_ray(camera cam, vec2 uv)
{
    ray r;

    r.origin = cam.origin;
    r.direction = normalize(cam.lower_left_corner + uv.x * cam.horizontal +
                            uv.y * cam.vertical - cam.origin);

    return r;
}

// returns the signed distance to a sphere from position p
float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}

// returns the signed distance to an infinate plane with a specific y value
float sdPlane(vec3 p, float z)
{
    return p.y - z;
}

float sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)
{
  p.x = abs(p.x);
  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);
  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;
}

// returns the signed distance to a box from position p
float sdBox( vec3 p, vec3 b )
{
    vec3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// returns the signed distance to a cylinder from position p
float sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)
{
	vec3  ba = b - a;
	vec3  pa = p - a;
	float baba = dot(ba,ba);
	float paba = dot(pa,ba);
	float x = length(pa*baba-ba*paba) - r*baba;
	float y = abs(paba-baba*0.5)-baba*0.5;
	float x2 = x*x;
	float y2 = y*y*baba;
	float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));
	return sign(d)*sqrt(abs(d))/baba;
}

// returns the signed distance to a cone from position p
float sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)
{
	float rba  = rb-ra;
	float baba = dot(b-a,b-a);
	float papa = dot(p-a,p-a);
	float paba = dot(p-a,b-a)/baba;
	float x = sqrt( papa - paba*paba*baba );
	float cax = max(0.0,x-((paba<0.5)?ra:rb));
	float cay = abs(paba-0.5)-0.5;
	float k = rba*rba + baba;
	float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );
	float cbx = x-ra - f*rba;
	float cby = paba - f;
	float s = (cbx<0.0 && cay<0.0) ? -1.0 : 1.0;
	return s*sqrt( min(cax*cax+cay*cay*baba, cbx*cbx+cby*cby*baba) );
}



/*vec3 shade(vec3 p, float dist, int iters, settings setts)
{
    if (setts.shade_mode == GRID)
    {
    	float res = 0.2;
    	float one = abs(mod(p.x, res) - res / 2.0);
    	float two = abs(mod(p.y, res) - res / 2.0);
    	float three = abs(mod(p.z, res) - res / 2.0);
    	float interp = min(one, min(two, three)) / res;

        // we added an attenuation term based on distance so that the infinite domain repetition
        // in space is visually comprehendable.
        float dist_attenuation = exp(-0.07 * dist);

        return dist_attenuation * mix( vec3(0.2, 0.5, 1.0), vec3(0.1, 0.1, 0.1), smoothstep(0.0,0.05,abs(interp)) );
    }
    else if (setts.shade_mode == COST)
    {
        return vec3(float(iters) / float(cost_norm));
    }
    else
    {
        return vec3(0.0);
    }

    return vec3(0.0);
}*/

// The animation which you see is of a 2D slice of a 3D object. The objects exist in [-1, 1] space
// and the slice is continuously moved along z=[-1,1] using a cosine. This method renders what the
// current z value is as a progress bar at the bottom of the animation for reference.
vec3 shade_progress_bar(vec2 p, vec2 res, float z)
{
    // have to take account of the aspect ratio
    float xpos = p.x * res.y / res.x;

    if (xpos > z - 0.01 && xpos < z + 0.01) return vec3(1.0);
    else return vec3(0.0);
}

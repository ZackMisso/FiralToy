vec3 box_domain_repetition(vec3 p, vec3 bounds)
{
    vec3 q = mod(p + 0.5 * bounds, bounds) - 0.5 * bounds;
    return q;
}

void polar_domain_repetition(inout vec2 p, float repetitions)
{
    float angle = 2.*PI/repetitions;
	float a = atan(p.y, p.x) + angle/2.;
	float r = length(p);

	a = mod(a,angle) - angle/2.;
	p = vec2(cos(a), sin(a))*r;
}

bool isEdge(vec3 p, vec2 uv)
{
    float threshold = 0.5f;
    float eps = 1e-2;

    if (abs(p.x) > 0.38 || abs(p.y) > 0.28) return true;

    if (length(
        	texture(iChannel0, uv+vec2(eps, 0.0)) -
            texture(iChannel0, uv-vec2(eps, 0.0)))
        > threshold) return true;

    if (length(
        	texture(iChannel0, uv+vec2(0.0, eps)) -
            texture(iChannel0, uv-vec2(0.0, eps)))
        > threshold) return true;

}

bool density(vec3 p, out vec3 density)
{
 	if (sdBox(p, vec3(4.f, 3.f, 1.0) * 0.1) < 0.f)
    {
        density = vec3(5.0f);
        vec2 uv = vec2((p.x - 0.4f) / 0.8f + 0.5, 1.f - (p.y - .3f) / .6f + 0.5);
        if (isEdge(p, uv) && (p.z > 0.08 || p.z < -0.08))
        {
         	density = texture(iChannel0, uv).xyz;
        	density = 1.f - density;
        	density = density * 2.f;
        }
        else
        {
            density = texture(iChannel0, uv).xyz;
        	density = 1.f - density;
        	density *= 18.f;
        }

        return true;
    }
    return false;
}

float map(vec3 p, settings setts)
{
    return sdBox(p, vec3(4.f, 3.f, 0.3) * 0.1);
    if (setts.domain_rep == BOX)
    {
        return world_sdf(box_domain_repetition(p, vec3(3.0 + cos(anim_speed * iTime))), iTime, setts);
    }
    else if (setts.domain_rep == POLAR)
    {
        polar_domain_repetition(p.xz, 12.0);
        return world_sdf(p, iTime, setts);
        //return min(world_sdf(p, iTime, setts), sdPlane(p, 0.f));
    }
    return world_sdf(p, iTime, setts);
}

vec3 computeNormal(vec3 p, settings setts)
{
    vec3 eps = vec3(EPSILON,0.0,0.0);
    vec3 normal = normalize( vec3(
        map(p+eps.xyy, setts) - map(p-eps.xyy, setts),
        map(p+eps.yxy, setts) - map(p-eps.yxy, setts),
        map(p+eps.yyx, setts) - map(p-eps.yyx, setts)));

    return normal;
}

vec3 render_full(ray r,
           	     int max_iter)
{
 	vec3 col = vec3(1.f);

    //return col;

    float dist = 0.0;
    float eps = 1e-2;
    int i = 0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        vec3 dense;

        if (density(p, dense))
        {
            col *= exp(-dense * eps * 1.0);
        }

        dist += eps;
    }

    return col;
}

bool sphere_tracing(ray r,
               		int max_iter,
               		settings setts,
               		out vec3 hit_loc,
               		out int iters)
{
    hit_loc = r.origin;
    bool hit = false;

    float dist = 0.0;
    float eps = 1e-2;
    int i = 0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        float next_step = map(p, setts);

        if (next_step < EPSILON)
        {
            hit_loc = p;
            iters = i;
            return true;
        }

        dist += eps;
    }

    iters = i;

    return false;
}

float soft_shadow(ray r,
                  int max_iter,
               	  settings setts,
                  float k)
{
    bool hit = false;

    float res = 1.0;
    int i = 0;
    float dist = 0.0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        float next_step = map(p, setts);

        res = min( res, k*next_step/(dist) );
        dist += next_step;


        if (next_step < EPSILON)
        {
            return 0.0;
        }
    }

    return min(res, 1.0);
}

vec3 shade(vec3 p, int iters, settings setts)
{
    if (setts.shade_mode == GRID)
    {
    	float res = 0.2;
    	float one = abs(mod(p.x, res) - res / 2.0);
    	float two = abs(mod(p.y, res) - res / 2.0);
    	float three = abs(mod(p.z, res) - res / 2.0);
    	float interp = min(one, min(two, three)) / res;

        // we added an attenuation term based on distance so that the infinite domain repetition
        // in space is visually comprehendable.
        //float dist_attenuation = exp(-0.07 * dist);

        return mix( vec3(0.2, 0.5, 1.0), vec3(0.1, 0.1, 0.1), smoothstep(0.0,0.05,abs(interp)) );
    }
    else if (setts.shade_mode == COST)
    {
        return vec3(float(iters) / float(cost_norm));
    }
    else if (setts.shade_mode == NORMAL)
    {
        vec3 eps = vec3(EPSILON,0.0,0.0);
        vec3 normal = computeNormal(p, setts);

        return (normal + vec3(1.0)) * 0.5;
    }
    else if (setts.shade_mode == AMBIENT)
    {
     	// they will have to implement this
        vec3 dir_to_light = normalize(two_tone_dir);

        vec3 normal = computeNormal(p, setts);

        float theta = acos(dot(dir_to_light, normal));

        if (theta < PI * 0.5)
        {
            return (1.0 - sin(theta) * 0.5) * two_tone_color_a +
                   sin(theta) * 0.5 * two_tone_color_b;
        }
        else
        {
            return (1.0 - sin(theta) * 0.5) * two_tone_color_b +
                   sin(theta) * 0.5 * two_tone_color_a;
        }
    }
    else if (setts.shade_mode == DIFFUSE_POINT)
    {
        vec3 light_pos = vec3(0.0, 5.0, 0.0);
        vec3 light_intensity = vec3(5.0);
        vec3 surface_color = vec3(0.5);

        vec3 surface_to_light = light_pos - p;
        float sqr_dist = dot(surface_to_light, surface_to_light);
        surface_to_light = normalize(surface_to_light);

        vec3 normal = computeNormal(p, setts);

        float diffuseCoefficient = max(0.0, dot(normal, surface_to_light));

        return diffuseCoefficient * surface_color * light_intensity / sqr_dist;
    }
    else if (setts.shade_mode == DIFFUSE_POINT_HARD_SHADOWS)
    {
        vec3 light_pos = vec3(0.0, 5.0, 0.0);
        vec3 light_intensity = vec3(5.0);
        vec3 surface_color = vec3(0.5);

        vec3 surface_to_light = light_pos - p;
        float sqr_dist = dot(surface_to_light, surface_to_light);
        surface_to_light = normalize(surface_to_light);

        vec3 normal = computeNormal(p, setts);

        float diffuseCoefficient = max(0.0, dot(normal, surface_to_light));

        vec3 orig = p + EPSILON * normal;
        ray shadow_ray = ray(orig, surface_to_light);
        vec3 hit2;
        int iters2;
        if (sphere_tracing(shadow_ray,
                           100,
                           setts,
                           hit2,
                           iters2))
        {
            return vec3(0.0);
        }

        return diffuseCoefficient * surface_color * light_intensity / sqr_dist;
    }
    else if (setts.shade_mode == DIFFUSE_DIR_HARD_SHADOWS)
    {
        vec3 light_dir = normalize(vec3(-1.0, -1.0, 0.0));
        vec3 light_color = vec3(0.8);
        vec3 surface_color = vec3(0.5);

        vec3 normal = computeNormal(p, setts);

        float diffuseCoefficient = max(0.0, dot(normal, -light_dir));

        float sdf = abs(map(p, setts));

        vec3 orig = p + EPSILON * normal;
        ray shadow_ray = ray(orig, -light_dir);
        vec3 hit2;
        int iters2;
        if (sphere_tracing(shadow_ray,
                           100,
                           setts,
                           hit2,
                           iters2))
        {
            return vec3(0.0);
        }

        return diffuseCoefficient * surface_color * light_color;
    }
    else if (setts.shade_mode == DIFFUSE_POINT_SOFT_SHADOWS)
    {
        vec3 light_pos = vec3(0.0, 5.0, 0.0);
        vec3 light_intensity = vec3(20.0);
        vec3 surface_color = vec3(0.5);
        float shadow_k = 1.0;

        vec3 surface_to_light = light_pos - p;
        float sqr_dist = dot(surface_to_light, surface_to_light);
        surface_to_light = normalize(surface_to_light);

        vec3 normal = computeNormal(p, setts);

        float diffuseCoefficient = max(0.0, dot(normal, surface_to_light));

        vec3 orig = p + EPSILON * normal;
        ray shadow_ray = ray(orig, surface_to_light);

        float shadow_coefficient = soft_shadow(shadow_ray,
                                               100,
                                               setts,
                                               shadow_k);

        return shadow_coefficient * diffuseCoefficient * surface_color * light_intensity / sqr_dist;
    }
    else if (setts.shade_mode == DIFFUSE_DIR_SOFT_SHADOWS)
    {
        vec3 light_dir = normalize(vec3(-1.0, -1.0, 0.0));
        vec3 light_color = vec3(0.8);
        vec3 surface_color = vec3(0.5);
        float shadow_k = 1.0;

        vec3 normal = computeNormal(p, setts);

        float diffuseCoefficient = max(0.0, dot(normal, -light_dir));

        vec3 orig = p + EPSILON * normal;
        ray shadow_ray = ray(orig, -light_dir);

        float shadow_coefficient = soft_shadow(shadow_ray,
                                               100,
                                               setts,
                                               shadow_k);

        return shadow_coefficient * diffuseCoefficient * surface_color * light_color;
    }
    else if (setts.shade_mode == SCENE_DIFFUSE_AMBIENT || setts.shade_mode == SCENE_DIFFUSE_AMBIENT_REFLECT)
    {
        vec3 point_light_pos = vec3(0.0, 5.0, 0.0);
        vec3 point_light_intensity = vec3(10.0, 9.0, 4.0);

        vec3 dir_light_dir = normalize(vec3(-1.0, -1.0, 0.0));
        vec3 dir_light_color = vec3(0.6 * 0.75, 0.5 * 0.75, 0.1 * 0.75);

        vec3 surface_color = vec3(0.5);

        float shadow_k = 1.0;
        float ambient_coefficient = 0.1;


        vec3 surface_to_pointlight = point_light_pos - p;
        float sqr_dist = dot(surface_to_pointlight, surface_to_pointlight);
        surface_to_pointlight = normalize(surface_to_pointlight);

        vec3 normal = computeNormal(p, setts);

        float point_diffuseCoefficient = max(0.0, dot(normal, surface_to_pointlight));
        float dir_diffuseCoefficient = max(0.0, dot(normal, -dir_light_dir));

        vec3 orig = p + EPSILON * normal;
        ray point_shadow_ray = ray(orig, surface_to_pointlight);
        ray dir_shadow_ray = ray(orig, -dir_light_dir);

        float point_shadow_coefficient = soft_shadow(point_shadow_ray,
                                                     100,
                                                     setts,
                                                     shadow_k);

        float dir_shadow_coefficient = soft_shadow(dir_shadow_ray,
                                                     100,
                                                     setts,
                                                     shadow_k);

        vec3 dir_to_amblight = normalize(two_tone_dir);
        vec3 ambient_term;

        float theta = acos(dot(dir_to_amblight, normal));

        if (theta < PI * 0.5)
        {
            ambient_term = (1.0 - sin(theta) * 0.5) * two_tone_color_a +
                   sin(theta) * 0.5 * two_tone_color_b;
        }
        else
        {
            ambient_term = (1.0 - sin(theta) * 0.5) * two_tone_color_b +
                   sin(theta) * 0.5 * two_tone_color_a;
        }

        return dir_shadow_coefficient * dir_diffuseCoefficient * surface_color * dir_light_color +
               point_shadow_coefficient * point_diffuseCoefficient * surface_color * point_light_intensity / sqr_dist +
               ambient_coefficient * ambient_term * 0.0;
    }
    else
    {
        return vec3(0.0);
    }

    return vec3(0.0);
}

vec3 render(settings setts, vec2 fragCoord)
{
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;

    camera cam;

    cam = camera_const(vec3(-20.0 * sin(iTime * anim_speed), 0.0, -20.0 * cos(iTime * anim_speed)),
    				   vec3(0.0, 0.0, 0.0),
                       vec3(0.0, 1.0, 0.0),
                       20.0,
                       640.0 / 360.0,
                       0.0,
                       sqrt(27.0));

    cam = camera_const(vec3(-2.0 * sin(iTime * anim_speed), 0.0, -2.0 * cos(iTime * anim_speed)),
    				   vec3(0.0, 0.0, 0.0),
                       vec3(0.0, 1.0, 0.0),
                       20.0,
                       640.0 / 360.0,
                       0.0,
                       sqrt(27.0));

    vec2 uv = fragCoord/iResolution.xy;
    ray r = camera_get_ray(cam, uv);



    int max_iter = 1000;

    vec3 col = vec3(0.0);

    vec3 hit_loc;
    int iters;
    bool hit;

    /*if (sphere_tracing(r, max_iter, setts, hit_loc, iters))
    {
        col = shade(hit_loc, iters, setts);
    }

    if (setts.shade_mode == SCENE_DIFFUSE_AMBIENT_REFLECT)
    {
        // cast a reflection ray
        vec3 normal = computeNormal(hit_loc, setts);

        ray reflect_ray = ray(hit_loc + EPSILON * normal,
                              reflect(r.direction, normal));

        if (sphere_tracing(reflect_ray, max_iter, setts, hit_loc, iters))
        {
            col += 0.15 * shade(hit_loc, iters, setts);
        }
    }*/

    col = render_full(r, max_iter);

    //return col;

    return pow(col, vec3(1.0 / 2.2));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    fragColor = vec4(render(render_settings, fragCoord), 1.0);
}

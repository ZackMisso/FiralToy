// pre-defined constants
#define EPSILON 1e-4
#define PI 3.1415926535897932384626433832795

// scene type
#define SPHERE 0
#define BOX 1
#define CYLINDER 2
#define CONE 3

// domain repetition
#define NONE 0
#define BOX 1
#define POLAR 2

#define DIFFUSE_DIR_SOFT_SHADOWS 8

//
// Render Settings
//
struct settings
{
    int sdf_func;
    int shade_mode;
    int domain_rep;
};

settings render_settings = settings(BOX, DIFFUSE_DIR_SOFT_SHADOWS, POLAR);



//float anim_speed = 0.35;
float anim_speed = 0.35;
int cost_norm = 200;

vec3 two_tone_color_a = vec3(0.6 * 1.0, 0.6 * 1.0, 0.0 * 1.0);
vec3 two_tone_color_b = vec3(0.2 * 1.0, 0.1 * 1.0, 0.9 * 1.0);
//vec3 two_tone_color_a = vec3(0.9,0.7,0.6);
//vec3 two_tone_color_b = vec3(0.0);
vec3 two_tone_dir = vec3(1.0, 1.0, 0.0);

//
// Ray
//

struct ray
{
    vec3 origin;            // this is the origin of the ray
    vec3 direction;         // this is the direction the ray is pointing in
};

//
// Camera
//

struct camera
{
    vec3 origin;            // this is the origin of your camera
    vec3 lower_left_corner; // this is the location of the lower-left corner of the image in relation to the origin
    vec3 horizontal;        // this is the horizontal extents of the image the camera sees
    vec3 vertical;          // this is the vertical extents of the image the camera sees
    vec3 u;
    vec3 v;
    float lens_radius;      // the radius of the lens
};

camera camera_const(vec3 lookfrom,
                    vec3 lookat,
                    vec3 up,
                    float fov,
                    float aspect,
                    float aperture,
                    float focal_dist)
{
    camera cam;

    vec3 w;

    cam.lens_radius = aperture / 2.0;

    float theta = fov * PI / 180.0;
    float half_height = tan(theta / 2.0);
    float half_width = aspect * half_height;
    cam.origin = lookfrom;
    w = normalize(lookfrom - lookat);
    cam.u = normalize(cross(up, w));
    cam.v = cross(w, cam.u);
    cam.lower_left_corner = cam.origin - half_width * cam.u * focal_dist - half_height * cam.v * focal_dist - w * focal_dist;
    cam.horizontal = 2.0 * half_width * cam.u * focal_dist;
    cam.vertical = 2.0 * half_height * cam.v * focal_dist;

    return cam;
}

ray camera_get_ray(camera cam, vec2 uv)
{
    ray r;

    r.origin = cam.origin;
    r.direction = normalize(cam.lower_left_corner + uv.x * cam.horizontal +
                            uv.y * cam.vertical - cam.origin);

    return r;
}

// returns the signed distance to a sphere from position p
float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}

float smin( float a, float b, float k )
{
    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
    return mix( b, a, h ) - k*h*(1.0-h);
}

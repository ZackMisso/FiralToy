/*
https://www.shadertoy.com/view/tddfRB
Made by Firal (Zack Misso)
Twitter: @ossim_zack
*/

vec3 box_domain_repetition(vec3 p, vec3 bounds)
{
    vec3 q = mod(p + 0.5 * bounds, bounds) - 0.5 * bounds;
    return q;
}

void polar_domain_repetition(inout vec2 p, float repetitions)
{
    float angle = 2.*PI/repetitions;
	float a = atan(p.y, p.x) + angle/2.;
	float r = length(p);

	a = mod(a,angle) - angle/2.;
	p = vec2(cos(a), sin(a))*r;
}

float map(vec3 p, settings setts)
{
    /*if (setts.domain_rep == BOX)
    {
        return world_sdf(box_domain_repetition(p, vec3(3.0 + cos(anim_speed * iTime))), iTime, setts);
    }
    else if (setts.domain_rep == POLAR)
    {

        return min(world_sdf(p, iTime, setts), sdPlane(p, 0.f));
    }
    return world_sdf(p, iTime, setts);*/
    //olar_domain_repetition(p.xz, 12.0);
    //return world_sdf(p, iTime, setts);

    float dist = sdSphere(p, 2.0f);

    float mag = clamp((10.0 * abs(cos(iTime*0.2 + 0.8))) / 5.0, 0.0, 1.0);

    for (float i = 0.0; i < 12.5; i += 1.0)
    {
     	dist = smin(dist, sdSphere(p - vec3(mag * 4.f * cos(iTime + i * PI / 6.0),
                                            0.f,
                                            mag * 2.4 * sin(iTime + i * PI / 6.0)), 0.4f), 0.8);
    }

    mag = 1.12 * clamp((10.0 * abs(cos(iTime*0.2))) / 5.0, 0.0, 1.0);

    //for (float i = 0.0; i < 11.5; i += 1.0)
    //{
    // 	dist = smin(dist, sdSphere(p - vec3(mag * 2.4f * cos(iTime + i * PI / 6.0),
    //                                        cos(iTime),
    //                                        mag * 4.0 * sin(iTime + i * PI / 6.0)), 0.4f), 0.4);
    //}

    for (float i = 0.0; i < 12.5; i += 1.0)
    {
     	dist = smin(dist, sdSphere(p - vec3(mag * 2.4f * cos(iTime + i * PI / 6.0),
                                            mag * 4.0 * sin(iTime + i * PI / 6.0),
                                           	0.f), 0.5f), 0.8);
    }

    mag =1.4*clamp((10.0 * abs(cos(iTime*0.2 + 1.6))) / 5.0, 0.0, 1.0);

    for (float i = 0.0; i < 12.5; i += 1.0)
    {
     	dist = smin(dist, sdSphere(p - vec3(0.f, mag * 2.4f * cos(iTime + i * PI / 6.0),
                                            mag * 4.0 * sin(iTime + i * PI / 6.0)), 0.6f), 0.8);
    }


    return dist;
}

vec3 computeNormal(vec3 p, settings setts)
{
    vec3 eps = vec3(EPSILON,0.0,0.0);
    vec3 normal = normalize( vec3(
        map(p+eps.xyy, setts) - map(p-eps.xyy, setts),
        map(p+eps.yxy, setts) - map(p-eps.yxy, setts),
        map(p+eps.yyx, setts) - map(p-eps.yyx, setts)));

    return normal;
}

bool sphere_tracing(ray r,
               		int max_iter,
               		settings setts,
               		out vec3 hit_loc,
               		out int iters)
{
    hit_loc = r.origin;
    bool hit = false;

    float dist = 0.0;
    int i = 0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        float next_step = map(p, setts);

        if (p.x > 50.0) return false;
        if (p.y > 50.0) return false;
        if (p.z > 50.0) return false;
        if (p.x < -50.0) return false;
        if (p.y < -50.0) return false;
        if (p.z < -50.0) return false;

        if (next_step < EPSILON)
        {
            hit_loc = p;
            iters = i;
            return true;
        }

        dist += next_step;
    }

    iters = i;

    return false;
}

float soft_shadow(ray r,
                  int max_iter,
               	  settings setts,
                  float k)
{
    bool hit = false;

    float res = 1.0;
    int i = 0;
    float dist = 0.0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        float next_step = map(p, setts);

        res = min( res, k*next_step/(dist) );
        dist += next_step;


        if (next_step < EPSILON)
        {
            return 0.0;
        }
    }

    return min(res, 1.0);
}

vec3 shade(vec3 p, int iters, settings setts)
{
    vec3 light_dir = normalize(vec3(-1.0, -1.0, 0.0));
    vec3 light_color = vec3(0.8);
    vec3 surface_color = vec3(0.5);
    float shadow_k = 1.0;

    vec3 normal = computeNormal(p, setts);

    float diffuseCoefficient = max(0.0, dot(normal, -light_dir));

    vec3 orig = p + EPSILON * normal;
    ray shadow_ray = ray(orig, -light_dir);

    float shadow_coefficient = soft_shadow(shadow_ray,
                                           100,
                                           setts,
                                           shadow_k);

    vec3 color = shadow_coefficient * diffuseCoefficient * surface_color * light_color;
    vec3 neg_color = 1.0 - color;
    neg_color = neg_color * vec3(0.005, 0.005, 0.01);

    return neg_color + shadow_coefficient * diffuseCoefficient * surface_color * light_color;
}

vec3 render(settings setts, vec2 fragCoord)
{
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;

    camera cam;

    cam = camera_const(vec3(-30.0 * sin(iTime), 10.0, -30.0 * cos(iTime)),
                       vec3(0.0, 0.0, 0.0),
                       vec3(0.0, 1.0, 0.0),
                       20.0,
                       640.0 / 360.0,
                       0.0,
                       sqrt(27.0));


    vec2 uv = fragCoord/iResolution.xy;
    ray r = camera_get_ray(cam, uv);



    int max_iter = 100;

    vec3 col = vec3(0.0);

    vec3 hit_loc;
    int iters;
    bool hit;

    if (sphere_tracing(r, max_iter, setts, hit_loc, iters))
    {
        col = shade(hit_loc, iters, setts);
    }

    return pow(col, vec3(1.0 / 2.2));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    fragColor = vec4(render(render_settings, fragCoord), 1.0);
}

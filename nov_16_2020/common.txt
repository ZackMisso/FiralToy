/*
https://www.shadertoy.com/view/3d3BR2
Made by Firal (Zack Misso)
Twitter: @ossim_zack
*/

// pre-defined constants
#define EPSILON 1e-4
#define PI 3.1415926535897932384626433832795

//
// Ray
//

struct ray
{
    vec3 origin;            // this is the origin of the ray
    vec3 direction;         // this is the direction the ray is pointing in
};

//
// Camera
//

struct camera
{
    vec3 origin;            // this is the origin of your camera
    vec3 lower_left_corner; // this is the location of the lower-left corner of the image in relation to the origin
    vec3 horizontal;        // this is the horizontal extents of the image the camera sees
    vec3 vertical;          // this is the vertical extents of the image the camera sees
    vec3 u;
    vec3 v;
    float lens_radius;      // the radius of the lens
};

camera camera_const(vec3 lookfrom,
                    vec3 lookat,
                    vec3 up,
                    float fov,
                    float aspect,
                    float aperture,
                    float focal_dist)
{
    camera cam;

    vec3 w;

    cam.lens_radius = aperture / 2.0;

    float theta = fov * PI / 180.0;
    float half_height = tan(theta / 2.0);
    float half_width = aspect * half_height;
    cam.origin = lookfrom;
    w = normalize(lookfrom - lookat);
    cam.u = normalize(cross(up, w));
    cam.v = cross(w, cam.u);
    cam.lower_left_corner = cam.origin - half_width * cam.u * focal_dist - half_height * cam.v * focal_dist - w * focal_dist;
    cam.horizontal = 2.0 * half_width * cam.u * focal_dist;
    cam.vertical = 2.0 * half_height * cam.v * focal_dist;

    return cam;
}

ray camera_get_ray(camera cam, vec2 uv)
{
    ray r;

    r.origin = cam.origin;
    r.direction = normalize(cam.lower_left_corner + uv.x * cam.horizontal +
                            uv.y * cam.vertical - cam.origin);

    return r;
}

// returns the signed distance to a sphere from position p
float sdSphere(vec3 p, float r)
{
 	return length(p) - r;
}

// returns the signed distance to a box from position p
float sdBox( vec3 p, vec3 b )
{
    vec3 q = abs(p) - b;
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

// The sdf for a sphere which is partially rendered. It is computed as the combined sdf
// between a sphere, and two planes intersecting the sphere according to the angle which
// is passed in as a parameter.
float sdPartialSphere(vec3 p, float r, float max_angle)
{
    // hard coding axis and normal for now. The normal is the direction tangential to
    // both of the lips. Axis is where the lips start
    vec3 axis = vec3(1.0, 0.0, 0.0);
    vec3 norm = vec3(0.0, 0.0, 1.0);
    //max_angle = 0.1;

    // compute the tanget vector
    vec3 tang = cross(norm, axis);

    // we want the angle between the projection onto the tangent
    float angle = acos(dot(normalize(vec3(p.x, p.y, 0.0)), axis));

    // hack because if a value is perfectly along the axis, there are some artifacts
    if (abs(p.x) < 1.0e-4) return length(p) - r;

    if (angle < max_angle)
    {
        // compute the closest lip, the other can be ignored
        float max_a = max_angle * sign(dot(tang, p));

        // direction of the closest 'lip'
        vec3 dir = vec3(axis.x * cos(max_a) - axis.y * sin(max_a),
                        axis.x * sin(max_a) + axis.y * cos(max_a),
                        0.f);


        // normal vector for the plane of the 'lip'
        vec3 norm_dir = cross(norm, dir);

        // project the point onto the infinite plane
        vec3 plane_point = p - norm_dir * dot(p, norm_dir);

        // project the point back onto the intersection between the sphere and the plane.
        plane_point = max(sign(dot(dir, plane_point)), 0.0) *
            		  min(length(plane_point), r) *
            		  normalize(plane_point);

        // project the point onto the base line of the sphere
        vec3 base_p = p;
        base_p.z = 0.0;

        // return the min of the projected point and the distance to the center line.
        return min(length(base_p), length(p-plane_point));
    }

    // compute distance to the sphere
    float dist = length(p) - r;

    // TODO: there is probably some optimization I can do to avoid these if statements, but
    //       I'll look into that later.
    // if the point is inside the sphere, we need to correctly account for the 'lips'
    if (dist < 0.0 && max_angle != 0.0)
    {
        // compute the closest lip, the other can be ignored
        float max_a = max_angle * sign(dot(tang, p));

        // direction of the closest 'lip'
        vec3 dir = vec3(axis.x * cos(max_a) - axis.y * sin(max_a),
                        axis.x * sin(max_a) + axis.y * cos(max_a),
                        0.f);

        // normal vector for the plane of the 'lip'
        vec3 norm_dir = cross(norm, dir);

        // project the point onto the infinite plane
        vec3 plane_point = p - norm_dir * dot(p, norm_dir);

        // project the point back onto the intersection between the sphere and the plane.
        plane_point = max(sign(dot(dir, plane_point)), 0.0) *
            		  min(length(plane_point), r) *
            		  normalize(plane_point);

        // project the point onto the base line of the sphere
        vec3 base_p = p;
        base_p.z = 0.0;

        // return the min of the projected point and the distance to the center line. Returns
        // the negative since the point is inside the sdf.
        return -min(length(base_p), min(-dist, length(p-plane_point)));
    }


    return dist;
}

/*
https://www.shadertoy.com/view/3d3BR2
Made by Firal (Zack Misso)
Twitter: @ossim_zack
*/

void map_walls(vec3 p,
               inout float global_dist,
               inout int render_type)
{
    float dist = -sdBox(p, vec3(200.0, 6.0, 6.0));
    if (dist < global_dist)
    {
        global_dist = dist;
        render_type = 0;
    }
}

void map_pac(vec3 p,
             inout float global_dist,
             inout int render_type)
{
    float dist = sdPartialSphere(p + vec3((140.0 - mod(iTime * 10.0, 10.0 * 5.5 * 2.f * PI / 2.1f)), 0.0, 0.0), 3.f, PI / 2.6 * abs(cos(iTime * 2.1 + PI / 2.0)));
    if (dist < global_dist)
    {
		global_dist = dist;
        render_type = 1;
    }
}

void map_orbs(vec3 p,
              inout float global_dist,
              inout int render_type)
{
    float freq = 2.f * PI / 2.1f;
    float anim_length = 5.5 * 2.f * PI / 2.1f;
 	float dist = 1000000000.0;

    if (mod(iTime, anim_length) < 1.0 * freq)
    	dist = min(dist, sdSphere(p + vec3(110.0, 0.0, 0.0), 0.7));
    if (mod(iTime, anim_length) < 2.0 * freq)
    	dist = min(dist, sdSphere(p + vec3(80.0, 0.0, 0.0), 0.7));
    if (mod(iTime, anim_length) < 3.0 * freq)
    	dist = min(dist, sdSphere(p + vec3(50.0, 0.0, 0.0), 0.7));
    if (mod(iTime, anim_length) < 4.0 * freq)
    	dist = min(dist, sdSphere(p + vec3(20.0, 0.0, 0.0), 0.7));
    if (mod(iTime, anim_length) < 5.0 * freq)
    	dist = min(dist, sdSphere(p + vec3(-10.0, 0.0, 0.0), 0.7));

    if (dist < global_dist)
    {
		global_dist = dist;
        render_type = 2;
    }
}

float map(vec3 p, inout int render_type)
{
    float dist = 1.0e10;
    map_walls(p, dist, render_type);
    map_pac(p, dist, render_type);
    map_orbs(p, dist, render_type);
    return dist;
}


vec3 computeNormal(vec3 p)
{
    vec3 eps = vec3(EPSILON,0.0,0.0);
    int tmp = 0;
    vec3 normal = normalize( vec3(
        map(p+eps.xyy, tmp) - map(p-eps.xyy, tmp),
        map(p+eps.yxy, tmp) - map(p-eps.yxy, tmp),
        map(p+eps.yyx, tmp) - map(p-eps.yyx, tmp)));

    return normal;
}

vec3 computeNormal(vec3 p, float epsilon)
{
    vec3 eps = vec3(epsilon,0.0,0.0);
    int tmp = 0;
    vec3 normal = normalize( vec3(
        map(p+eps.xyy, tmp) - map(p-eps.xyy, tmp),
        map(p+eps.yxy, tmp) - map(p-eps.yxy, tmp),
        map(p+eps.yyx, tmp) - map(p-eps.yyx, tmp)));

    return normal;
}

bool sphere_tracing(ray r,
               		int max_iter,
               		out int render_type,
               		out vec3 hit_loc,
               		out int iters)
{
    hit_loc = r.origin;
    bool hit = false;
    int r_type = -1;

    float dist = 0.0;
    int i = 0;

    for (; i < max_iter; ++i)
    {
        vec3 p = r.origin + r.direction * dist;

        float next_step = map(p, r_type);

        if (next_step < EPSILON)
        {
            hit_loc = p;
            iters = i;
            render_type = r_type;
            return true;
        }

        dist += next_step;
    }

    iters = i;

    return false;
}

vec3 shade(vec3 p, int iters, int render_type)
{
    vec3 shade_color = vec3(0.0);

    if (render_type == 0)
    {
        vec3 eps = vec3(EPSILON,0.0,0.0);
        vec3 actual_normal = computeNormal(p);
        vec3 blurred_normal = computeNormal(p, 0.4);

        shade_color = vec3(0.002) + vec3(0.1, 0.1, 1.0) * (1.0 - pow(abs(dot(actual_normal, blurred_normal)), 2.f));
    }
    else if (render_type == 1)
    {
        vec3 eps = vec3(0.05,0.0,0.0);
        vec3 normal = computeNormal(p);

        vec3 normal_1 = computeNormal(p + eps.xyy);
        vec3 normal_2 = computeNormal(p - eps.xyy);
        vec3 normal_3 = computeNormal(p + eps.yxy);
        vec3 normal_4 = computeNormal(p - eps.yxy);
        vec3 normal_5 = computeNormal(p + eps.yxy);
        vec3 normal_6 = computeNormal(p - eps.yyx);

        float diff = abs(dot(normal, normal_1));
        diff = min(diff, abs(dot(normal, normal_2)));
        diff = min(diff, abs(dot(normal, normal_3)));
        diff = min(diff, abs(dot(normal, normal_4)));
        diff = min(diff, abs(dot(normal, normal_5)));
        diff = min(diff, abs(dot(normal, normal_6)));

        vec3 dir_to_light = normalize(vec3(1.0, 1.0, 0.0));
        vec3 two_tone_color_a = vec3(0.5, 0.5, 0.0);
        vec3 two_tone_color_b = vec3(0.00, 0.00, 0.00);

        vec3 eye = vec3(20.0, 0.0, 4.0);
        vec3 eye2p = normalize(p - eye);

        float theta = acos(dot(dir_to_light, normal));
        vec3 result = vec3(0.0);

        if (theta < PI * 0.5)
        {
            result = (1.0 - sin(theta) * 0.5) * two_tone_color_a +
                     sin(theta) * 0.5 * two_tone_color_b;
        }
        else
        {
            result = (1.0 - sin(theta) * 0.5) * two_tone_color_b +
                     sin(theta) * 0.5 * two_tone_color_a;
        }

        vec3 fresnel_normal = clamp(normal, 0.f, 1.f);

        shade_color = result + vec3(1.0, 1.0, 0.0) * pow(1.0 - diff, 2.0f) +
            				   vec3(1.0, 1.0, 0.0) * pow(1.0 - abs(dot(eye2p, fresnel_normal)), 10.f);
    }
    else if (render_type == 2)
    {
        vec3 dir_to_light = normalize(vec3(1.0, 1.0, 0.0));
        vec3 two_tone_color_a = vec3(0.5, 0.5, 0.5);
        vec3 two_tone_color_b = vec3(0.00, 0.00, 0.00);

        vec3 normal = computeNormal(p);
        vec3 eye = vec3(20.0, 0.0, 4.0);
        vec3 eye2p = normalize(p - eye);

        float theta = acos(dot(dir_to_light, normal));
        vec3 result = vec3(0.0);

        if (theta < PI * 0.5)
        {
            result = (1.0 - sin(theta) * 0.5) * two_tone_color_a +
                     sin(theta) * 0.5 * two_tone_color_b;
        }
        else
        {
            result = (1.0 - sin(theta) * 0.5) * two_tone_color_b +
                     sin(theta) * 0.5 * two_tone_color_a;
        }

        shade_color = 1.3*result + vec3(0.1, 0.1, 1.0) * pow(1.0 - dot(eye2p, normal), 2.f);
    }
    else
    {
        shade_color = vec3(0.0);
    }

    vec3 eye = vec3(20.0, 0.0, 4.0);

    return shade_color * exp(-0.02 * length(eye - p));
}

vec3 render(vec2 fragCoord)
{
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;

    camera cam;

    float anim_length = 5.5 * 2.f * PI / 2.1f * 2.f;

    float sgn = sign(1.0 - mod(iTime, anim_length) / (anim_length / 2.0));

    cam = camera_const(vec3(20.0, 1.0, sgn * 4.0),
    				   vec3(4.0, 0.0, 0.0),
                       vec3(0.0, 1.0, 0.0),
                       18.0,
                       1280.0 / 720.0,
                       0.0,
                       sqrt(27.0));


    vec2 uv = fragCoord/iResolution.xy;
    ray r = camera_get_ray(cam, uv);

    int max_iter = 800;

    vec3 col = vec3(0.0);

    vec3 hit_loc;
    int iters;
    bool hit;
    int render_type = -1;

    if (sphere_tracing(r, max_iter, render_type, hit_loc, iters))
    {
        col = shade(hit_loc, iters, render_type);
    }

    return pow(col, vec3(1.0 / 2.2));
}

void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    fragColor = vec4(render(fragCoord), 1.0);
}

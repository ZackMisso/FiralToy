/*
https://www.shadertoy.com/view/tddfRB
Made by Firal (Zack Misso)
Twitter: @ossim_zack
*/

#define ANIM_SPEED 0.35

// The sdf for a sphere which is partially rendered. It is computed as the combined sdf
// between a sphere, and two planes intersecting the sphere according to the angle which
// is passed in as a parameter.
float sdPartialSphere(vec3 p, float r, float max_angle)
{
    // hard coding axis and normal for now. The normal is the direction tangential to
    // both of the lips. Axis is where the lips start
    vec3 axis = vec3(0.0, 1.0, 0.0);
    vec3 norm = vec3(0.0, 0.0, 1.0);

    vec3 dir = normalize(p);
    float angle = acos(dot(dir, axis));

    if (angle < max_angle)
    {
        // compute the tanget vector
        vec3 tang = cross(norm, axis);

        // compute the closest lip, the other can be ignored
        float max_a = max_angle * sign(dot(tang, dir));

        // direction of the closest 'lip'
        vec3 dir = vec3(axis.x * cos(max_a) - axis.y * sin(max_a),
                        axis.x * sin(max_a) + axis.y * cos(max_a),
                        0.f);

        // normal vector for the plane of the 'lip'
        vec3 norm_dir = cross(norm, dir);

        // project the point onto the infinite plane
        vec3 plane_point = p - norm_dir * dot(p, norm_dir);

        // project that point back onto the overlap with the sphere
        plane_point = max(min(dot(dir, plane_point), r), 0.0) * normalize(plane_point);

        // return the min of the projected point and the distance to the center.
        return min(length(p), length(p-plane_point));
    }

    // return distance to the sphere normally
    return length(p) - r;
}

// creates a fancy little animation progress bar
vec3 shade_progress_bar(vec2 p, vec2 res, float z)
{
    // have to take account of the aspect ratio
    float xpos = p.x * res.y / res.x;

    if (xpos > z - 0.01 && xpos < z + 0.01) return vec3(1.0);
    else return vec3(0.0);
}

// the shading routine. Modified version of iq's
// https://www.shadertoy.com/view/3ltSW2
vec3 shade(float sd)
{
    vec3 col = vec3(1.0) - sign(sd) * vec3(0.9,0.4,0.2);

    col *= 1.0 - exp(-6.0*abs(sd));
	col *= 0.8 + 0.2*cos(140.0*sd);
	col = mix( col, vec3(1.0, 0.0, 0.0), 1.0-smoothstep(0.0,0.02,abs(sd)) );

    return col;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;
    float angle = 3.14 * cos(ANIM_SPEED * iTime);
    vec3 world_p = vec3(p*1.3, 0.0);

    if (p.y < -0.95)
        fragColor = vec4(shade_progress_bar(p, iResolution.xy, angle / 3.14), 1.0);
    else
        fragColor = vec4(shade(sdPartialSphere(world_p, 1.0, abs(angle))), 1.0);
}
